{"version":3,"sources":["users.js","Login.js","Content.js","App.js","serviceWorker.js","index.js"],"names":["users","username","password","Login","props","handleSubmit","event","preventDefault","onSubmit","user","state","toLowerCase","setState","valid","inputChange","target","placeholder","value","this","children","type","onChange","onClick","Component","Content","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sOAAaA,EAAQ,CACjB,CACIC,SAAU,UACVC,SAAU,eAGd,CACID,SAAU,aACVC,SAAU,kBAGd,CACID,SAAU,gBACVC,SAAU,oBAGd,CACID,SAAU,WACVC,SAAU,iBC4CHC,E,kDAzDX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAQVC,aAAe,SAACC,GACZA,EAAMC,iBACN,EAAKC,YAXS,EAclBA,SAAW,WAAO,IAAD,gBACMR,GADN,IACb,2BAAyB,CAAC,IAAfS,EAAc,QACrB,GAAI,EAAKC,MAAMT,SAASU,gBAAkBF,EAAKR,SAASU,eAAiB,EAAKD,MAAMR,WAAaO,EAAKP,SAAS,CAE3G,EAAKU,SAAS,CAACC,OAAO,IACtB,QALK,gCAdC,EAwBlBC,YAAc,SAACR,GACX,EAAKM,SAAL,eAAgBN,EAAMS,OAAOC,YAAcV,EAAMS,OAAOE,SAvBxD,EAAKP,MAAQ,CACTT,SAAU,GACVC,SAAU,GACVW,OAAO,GALG,E,qDA6Bd,OAAIK,KAAKR,MAAMG,MACJK,KAAKd,MAAMe,SAId,6BACI,0BAAMX,SAAUU,KAAKb,cACjB,2BACI,2BACAe,KAAK,OACLJ,YAAY,WACZK,SAAUH,KAAKJ,eAGnB,2BACI,2BACAM,KAAK,OACLJ,YAAY,WACZK,SAAUH,KAAKJ,eAGnB,2BAAG,4BAAQM,KAAK,SAASE,QAASJ,KAAKb,cAApC,iB,GAnDPkB,aCKLC,EANC,WAEZ,OAAO,+C,MCWIC,MAXf,WACE,OACE,yBAAKC,UAAU,OACb,iDACA,kBAAC,EAAD,CAAOA,UAAU,SACf,kBAAC,EAAD,SCEYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.8a84f71d.chunk.js","sourcesContent":["export const users = [\n    {\n        username: 'Jeff123',\n        password: 'supersecret'\n\n    },\n    {\n        username: 'JoshIsCool',\n        password: 'passwordIsCool'\n\n    },\n    {\n        username: 'ChrisIsCooler',\n        password: 'passwordIsCooler'\n\n    },\n    {\n        username: 'ZebraFan',\n        password: 'secretzebras'\n\n    }\n]","import React, { Component } from 'react';\nimport {users} from './users';\n\n\nclass Login extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            username: '',\n            password: '',\n            valid: false\n        }\n    }\n\n    handleSubmit = (event) =>{\n        event.preventDefault();\n        this.onSubmit();\n    }\n\n    onSubmit = () => {\n        for (const user of users){\n            if (this.state.username.toLowerCase() === user.username.toLowerCase() && this.state.password === user.password){\n                \n                this.setState({valid: true});\n                break;\n            }\n        }\n    };\n\n    inputChange = (event) => {\n        this.setState({[event.target.placeholder]: event.target.value});\n    }\n\n    render() {\n        if (this.state.valid){\n            return this.props.children;\n        }\n        else{\n            return(\n                <div>\n                    <form onSubmit={this.handleSubmit}>\n                        <p>\n                            <input \n                            type=\"text\" \n                            placeholder=\"username\" \n                            onChange={this.inputChange}>\n                            </input>\n                        </p>\n                        <p>\n                            <input \n                            type=\"text\" \n                            placeholder=\"password\" \n                            onChange={this.inputChange}>\n                            </input>\n                        </p>\n                        <p><button type=\"submit\" onClick={this.handleSubmit}>Submit</button></p>\n                    </form>\n                </div>\n            );\n        }\n    }\n}\nexport default Login;","import React from 'react';\n\n\nconst Content = () => {\n    \n    return <h1>You logged in!</h1>\n   \n}\n\nexport default Content;","import React from 'react';\nimport Login from './Login';\nimport Content from './Content';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Simple Login Page</h1>\n      <Login className=\"login\">\n        <Content />\n      </Login>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}